{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const initialState = {\n  todos: [{\n    id: 1,\n    textValue: \"시작하기!\",\n    checked: false\n  }]\n};\n\nconst dummyPost = data => {\n  return {\n    id: 2,\n    textValue: `${data}`,\n    checked: false\n  };\n};\n\nconst ADD_POST = \"ADD_POST\";\nconst CHECKED_POST = \"CHECKED_POST\"; //보류\n\nexport const addPost = data => {\n  return {\n    type: ADD_POST,\n    data\n  };\n};\nexport const checkedPost = id => {\n  return {\n    type: CHECKED_POST,\n    id\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        todos: [dummyPost(action.data), ...state.todos]\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/panda/donga/prepare/front/reducers/post.js"],"names":["initialState","todos","id","textValue","checked","dummyPost","data","ADD_POST","CHECKED_POST","addPost","type","checkedPost","reducer","state","action"],"mappings":";;;;;;AAAA,OAAO,MAAMA,YAAY,GAAG;AAC1BC,EAAAA,KAAK,EAAE,CACL;AACEC,IAAAA,EAAE,EAAE,CADN;AAEEC,IAAAA,SAAS,EAAE,OAFb;AAGEC,IAAAA,OAAO,EAAE;AAHX,GADK;AADmB,CAArB;;AAUP,MAAMC,SAAS,GAAIC,IAAD,IAAU;AAC1B,SAAO;AACLJ,IAAAA,EAAE,EAAE,CADC;AAELC,IAAAA,SAAS,EAAG,GAAEG,IAAK,EAFd;AAGLF,IAAAA,OAAO,EAAE;AAHJ,GAAP;AAKD,CAND;;AAQA,MAAMG,QAAQ,GAAG,UAAjB;AACA,MAAMC,YAAY,GAAG,cAArB,C,CAAqC;;AAErC,OAAO,MAAMC,OAAO,GAAIH,IAAD,IAAU;AAC/B,SAAO;AACLI,IAAAA,IAAI,EAAEH,QADD;AAELD,IAAAA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,MAAMK,WAAW,GAAIT,EAAD,IAAQ;AACjC,SAAO;AACLQ,IAAAA,IAAI,EAAEF,YADD;AAELN,IAAAA;AAFK,GAAP;AAID,CALM;;AAOP,MAAMU,OAAO,GAAG,CAACC,KAAK,GAAGb,YAAT,EAAuBc,MAAvB,KAAkC;AAChD,UAAQA,MAAM,CAACJ,IAAf;AACE,SAAKH,QAAL;AACE,6CACKM,KADL;AAEEZ,QAAAA,KAAK,EAAE,CAACI,SAAS,CAACS,MAAM,CAACR,IAAR,CAAV,EAAyB,GAAGO,KAAK,CAACZ,KAAlC;AAFT;;AAIF;AACE,aAAOY,KAAP;AAPJ;AASD,CAVD;;AAYA,eAAeD,OAAf","sourcesContent":["export const initialState = {\r\n  todos: [\r\n    {\r\n      id: 1,\r\n      textValue: \"시작하기!\",\r\n      checked: false,\r\n    },\r\n  ],\r\n};\r\n\r\nconst dummyPost = (data) => {\r\n  return {\r\n    id: 2,\r\n    textValue: `${data}`,\r\n    checked: false,\r\n  };\r\n};\r\n\r\nconst ADD_POST = \"ADD_POST\";\r\nconst CHECKED_POST = \"CHECKED_POST\"; //보류\r\n\r\nexport const addPost = (data) => {\r\n  return {\r\n    type: ADD_POST,\r\n    data,\r\n  };\r\n};\r\n\r\nexport const checkedPost = (id) => {\r\n  return {\r\n    type: CHECKED_POST,\r\n    id,\r\n  };\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_POST:\r\n      return {\r\n        ...state,\r\n        todos: [dummyPost(action.data), ...state.todos],\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}