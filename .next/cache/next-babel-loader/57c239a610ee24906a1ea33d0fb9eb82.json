{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from \"next-redux-wrapper\";\nconst initialState = {\n  todos: [{\n    id: 1,\n    textValue: \"시작하기!\",\n    checked: false\n  }]\n};\nconst dummyPost = {\n  id: 2,\n  textValue: \"더미데이터\",\n  checked: false\n};\nexport const add = data => {\n  return {\n    type: \"ADD_DO\",\n    data\n  };\n};\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case HYDRATE:\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    case \"ADD_DO\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        todos: [dummyPost, ...state.todos]\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["C:/Users/panda/donga/prepare/front/reducers/index.js"],"names":["HYDRATE","initialState","todos","id","textValue","checked","dummyPost","add","data","type","rootReducer","state","action","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,CACL;AACEC,IAAAA,EAAE,EAAE,CADN;AAEEC,IAAAA,SAAS,EAAE,OAFb;AAGEC,IAAAA,OAAO,EAAE;AAHX,GADK;AADY,CAArB;AAUA,MAAMC,SAAS,GAAG;AAChBH,EAAAA,EAAE,EAAE,CADY;AAEhBC,EAAAA,SAAS,EAAE,OAFK;AAGhBC,EAAAA,OAAO,EAAE;AAHO,CAAlB;AAMA,OAAO,MAAME,GAAG,GAAIC,IAAD,IAAU;AAC3B,SAAO;AACLC,IAAAA,IAAI,EAAE,QADD;AAELD,IAAAA;AAFK,GAAP;AAID,CALM;;AAOP,MAAME,WAAW,GAAG,CAACC,KAAK,GAAGV,YAAT,EAAuBW,MAAvB,KAAkC;AACpD,UAAQA,MAAM,CAACH,IAAf;AACE,SAAKT,OAAL;AACE,6CAAYW,KAAZ,GAAsBC,MAAM,CAACC,OAA7B;;AACF,SAAK,QAAL;AACE,6CACKF,KADL;AAEET,QAAAA,KAAK,EAAE,CAACI,SAAD,EAAY,GAAGK,KAAK,CAACT,KAArB;AAFT;;AAIF;AACE,aAAOS,KAAP;AATJ;AAWD,CAZD;;AAcA,eAAeD,WAAf","sourcesContent":["import { HYDRATE } from \"next-redux-wrapper\";\r\n\r\nconst initialState = {\r\n  todos: [\r\n    {\r\n      id: 1,\r\n      textValue: \"시작하기!\",\r\n      checked: false,\r\n    },\r\n  ],\r\n};\r\n\r\nconst dummyPost = {\r\n  id: 2,\r\n  textValue: \"더미데이터\",\r\n  checked: false,\r\n};\r\n\r\nexport const add = (data) => {\r\n  return {\r\n    type: \"ADD_DO\",\r\n    data,\r\n  };\r\n};\r\n\r\nconst rootReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case HYDRATE:\r\n      return { ...state, ...action.payload };\r\n    case \"ADD_DO\":\r\n      return {\r\n        ...state,\r\n        todos: [dummyPost, ...state.todos],\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default rootReducer;\r\n"]},"metadata":{},"sourceType":"module"}